apply plugin: 'com.android.model.library'

model {
    repositories {
        libs(PrebuiltLibraries) {
            iconvLib {
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("../../External/cegui/libs/${targetPlatform.getName()}/libiconv.a")
                }
            }
            nativeAppGlue {
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("../../External/cegui/libs/${targetPlatform.getName()}/libandroid_native_app_glue.a")
                }
            }
            ceguiBaseRelease {
                headers.srcDirs =
                        [
                            "../cegui/externalNativeBuild/cmake/release/armeabi-v7a/cegui/include",
                            "../../External/cegui/cegui/include",
                            "${rootProject.ext.ndkDir}/sources/android/native_app_glue"
                        ]
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("../cegui/build/intermediates/cmake/release/lib/${targetPlatform.getName()}/libCEGUIBase-9999_Static.a")
                }
            }
            ceguiBaseDebug {
                headers.srcDirs =
                        [
                                "../cegui/externalNativeBuild/cmake/debug/armeabi-v7a/cegui/include",
                                "../../External/cegui/cegui/include",
                                "${rootProject.ext.ndkDir}/sources/android/native_app_glue"
                        ]
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("../cegui/build/intermediates/cmake/debug/lib/${targetPlatform.getName()}/libCEGUIBase-9999_Static.a")
                }
            }
            ceguiCommonDialogsRelease {
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("../cegui/build/intermediates/cmake/release/lib/${targetPlatform.getName()}/libCEGUICommonDialogs-9999_Static.a")
                }
            }
            ceguiCommonDialogsDebug {
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("../cegui/build/intermediates/cmake/debug/lib/${targetPlatform.getName()}/libCEGUICommonDialogs-9999_Static.a")
                }
            }
            ceguiCoreRendererSetRelease {
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("../cegui/build/intermediates/cmake/release/lib/${targetPlatform.getName()}/libCEGUICoreWindowRendererSet_Static.a")
                }
            }
            ceguiCoreRendererSetDebug {
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("../cegui/build/intermediates/cmake/debug/lib/${targetPlatform.getName()}/libCEGUICoreWindowRendererSet_Static.a")
                }
            }
            ceguiFreeimageCodecRelease {
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("../cegui/build/intermediates/cmake/release/lib/${targetPlatform.getName()}/libCEGUIFreeImageImageCodec_Static.a")
                }
            }
            ceguiFreeimageCodecDebug {
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("../cegui/build/intermediates/cmake/debug/lib/${targetPlatform.getName()}/libCEGUIFreeImageImageCodec_Static.a")
                }
            }
            ceguiLuaRelease {
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("../cegui/build/intermediates/cmake/release/lib/${targetPlatform.getName()}/libCEGUILuaScriptModule-9999_Static.a")
                }
            }
            ceguiLuaDebug {
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("../cegui/build/intermediates/cmake/debug/lib/${targetPlatform.getName()}/libCEGUILuaScriptModule-9999_Static.a")
                }
            }
            ceguiOpenglRelease {
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("../cegui/build/intermediates/cmake/release/lib/${targetPlatform.getName()}/libCEGUIOpenGLRenderer-9999_Static.a")
                }
            }
            ceguiOpenglDebug {
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("../cegui/build/intermediates/cmake/debug/lib/${targetPlatform.getName()}/libCEGUIOpenGLRenderer-9999_Static.a")
                }
            }
            ceguiTinyxmlRelease {
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("../cegui/build/intermediates/cmake/release/lib/${targetPlatform.getName()}/libCEGUITinyXMLParser_Static.a")
                }
            }
            ceguiTinyxmlDebug {
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("../cegui/build/intermediates/cmake/release/lib/${targetPlatform.getName()}/libCEGUITinyXMLParser_Static.a")
                }
            }
        }
    }
    android {
        compileSdkVersion rootProject.ext.compileSdkVersion
        buildToolsVersion rootProject.ext.buildToolsVersion

        defaultConfig.with {
            minSdkVersion.apiLevel = rootProject.ext.minSdkVersion
            targetSdkVersion.apiLevel = rootProject.ext.targetSdkVersion
            versionCode = rootProject.ext.versionCode
            versionName = rootProject.ext.versionName
        }

        ndk {
            moduleName "native-lib"
            toolchain "clang"
            stl "gnustl_shared"
            CFlags.add("-fexceptions")
            CFlags.add("-Wall")
            CFlags.add("-Werror")
            CFlags.add("-Wno-unused-function")
            CFlags.add("-Wno-overloaded-virtual")
            CFlags.add("-DVERSION=\"ver-${getRootProject().getVersion().toString()}\"".toString())
            cppFlags.addAll(CFlags)
            cppFlags.add("-frtti")
            ldLibs.add("log")
            ldLibs.add("z")
            ldLibs.add("m")
            ldLibs.add("GLESv3")
            ldLibs.add("EGL")
            ldLibs.add("android")
            abiFilters.add("armeabi-v7a")
        }

        buildTypes {
            release {
                minifyEnabled false
                proguardFiles.add(file("proguard-rules.pro"))
                ndk {
                    CFlags.add("-O3")
                    cppFlags.add("-O3")
                    cppFlags.add("-mhard-float")
                    cppFlags.add("-mfloat-abi=softfp")
                    cppFlags.add("-mfpu=neon")
                    CFlags.add("-D_NDK_MATH_NO_SOFTFP=1")
                    cppFlags.add("-D_NDK_MATH_NO_SOFTFP=1")
                }
            }
            debug {
                ndk {
                    CFlags.add("-g")
                    cppFlags.add("-g")
                }
            }
        }
    }

    // This source set represents everything shared by all library variants
    android.sources {
        main {
            jni {
                source {
                    exclude "**/External/*"

                    srcDirs = ['src/main/cpp']
                }
                dependencies {
//            project ":cegui" linkage "static" //this is what the bug 213870 was. solution was to move to the gradle dependencies below
                    project ":freetype" linkage "shared"
                    project ":freeimage" linkage "shared"
                    project ":pcre" linkage "shared"
                    project ":tinyxml" linkage "shared"
                    project ":toluapp" linkage "shared"
                    project ":lua" linkage "shared"
                    library "iconvLib" linkage "static"
                    library "nativeAppGlue" linkage "static"
                }
            }
        }
        release {
            jni {
                dependencies {
                    library "ceguiBaseRelease" linkage "static"
                    library "ceguiCommonDialogsRelease" linkage "static"
                    library "ceguiCoreRendererSetRelease" linkage "static"
                    library "ceguiFreeimageCodecRelease" linkage "static"
                    library "ceguiLuaRelease" linkage "static"
                    library "ceguiOpenglRelease" linkage "static"
                    library "ceguiTinyxmlRelease" linkage "static"
                }
            }
        }
        debug {
            jni {
                dependencies {
                    library "ceguiBaseDebug" linkage "static"
                    library "ceguiCommonDialogsDebug" linkage "static"
                    library "ceguiCoreRendererSetDebug" linkage "static"
                    library "ceguiFreeimageCodecDebug" linkage "static"
                    library "ceguiLuaDebug" linkage "static"
                    library "ceguiOpenglDebug" linkage "static"
                    library "ceguiTinyxmlDebug" linkage "static"

                }
            }
        }
    }

    android.lintOptions {
        abortOnError false
    }
}

dependencies {
    compile project(path: ':cegui', configuration: "release")
    compile project(path: ':cegui', configuration: "debug")
}