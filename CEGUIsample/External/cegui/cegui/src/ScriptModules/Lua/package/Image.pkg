enum AutoScaledMode
{
    ASM_Disabled,
    ASM_Vertical,
    ASM_Horizontal,
    ASM_Min,
    ASM_Max,
    ASM_Both
};

class Image
{

    const string getName() const;

    const Size<float>& getRenderedSize() const;
    const glm::vec2& getRenderedOffset() const;

    void render(std::vector<CEGUI::GeometryBuffer*>& geometry_buffers,
                    const Rect<float>& dest_area,
                    const Rect<float>* clip_area,
                    bool clipping_enabled,
                    const ColourRect& multiplication_colours = ColourRect(0XFFFFFFFF),
                    float alpha = 1.0f) const;

    void render(std::vector<CEGUI::GeometryBuffer*>& geometry_buffers,
                const glm::vec2& position,
                const Rect<float>* clip_area = 0,
                const bool clipping_enabled = false) const;

    void render(std::vector<CEGUI::GeometryBuffer*>& geometry_buffers,
                    const glm::vec2& position,
                    const Rect<float>* clip_area,
                    const bool clipping_enabled,
                    const ColourRect& colours,
                    float alpha = 1.0f) const;

    void render(std::vector<CEGUI::GeometryBuffer*>& geometry_buffers,
                    const glm::vec2& position,
                    const Size<float>& size,
                    const Rect<float>* clip_area = 0,
                    const bool clipping_enabled = false) const;

    void render(std::vector<CEGUI::GeometryBuffer*>& geometry_buffers,
                    const glm::vec2& position,
                    const Size<float>& size,
                    const Rect<float>* clip_area,
                    const bool clipping_enabled,
                    const ColourRect& colours,
                    float alpha = 1.0f) const;

    static void computeScalingFactors(AutoScaledMode mode,
                                      const Size<float>& display_size,
                                      const Size<float>& native_display_size,
                                      float& x_scale,
                                      float& y_scale);
};
